Concurrency


1)The synchronized keyword ensures  only single thread can execute block at one time


2) 
The problem is that in the absence of synchronization, there is no guarantee as
to when, if ever, the background thread will see the change in the value of stopRequested
that was made by the main thread



3)
synchronization has no effect unless both read and write
operations are synchronized.


4)
 volatile modifier performs no mutual exclusion, it
guarantees that any thread that reads the field will see most recently written
value


If you need only inter-thread communication, and not mutual
exclusion, the volatile modifier is an acceptable form of synchronization, but it
can be tricky to use correctly.


5)Dont call alien methods in synchronized block:

Inside a synchronized
region, do not invoke a method that is designed to be overridden, or one provided
by a client in the form of a function object

it can cause  exceptions, deadlocks, or data corruption


6)
As a rule, you should do as little work as possible inside synchronized
regions

7)

Use concurrency utilities instead of wait() and notify()
like Executor-framework, concurrent collections and synchronizers............................

8)Dont depend on thread scheduler

The best way to write a robust program is to ensure that
the average number of runnable(active not waiting) threads is not significantly greater than the number
of processors.





